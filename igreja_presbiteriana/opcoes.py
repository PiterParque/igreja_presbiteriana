# Form implementation generated from reading ui file 'opcoes.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from conect_banco import  cadastrar_vesiculo,editar_vesiculo,deletar_vesiculo,listar_vesiculos,buscar_vesiculo_por_id,inserir_versiculo_atual,buscar_versiculo_atual
class UI_opcoes(QtWidgets.QWidget):
    def __init__(self,parent=None):
        super().__init__()
        self.parent=parent
        self.setupUi(self)
    def setupUi(self, Widget):
        Widget.setObjectName("opcoes")
        Widget.resize(765, 500)
        self.widget = QtWidgets.QWidget(parent=Widget)
        self.widget.setObjectName("opcoes")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(Widget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.timeEdit = QtWidgets.QTimeEdit(parent=self.widget)
        self.timeEdit.setObjectName("timeEdit")
        self.horizontalLayout_2.addWidget(self.timeEdit)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_4 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.calendarWidget = QtWidgets.QCalendarWidget(parent=self.widget)
        self.calendarWidget.setObjectName("calendarWidget")
        self.horizontalLayout.addWidget(self.calendarWidget)

        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.line = QtWidgets.QFrame(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_4.addWidget(self.line)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_3 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.widget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_6 = QtWidgets.QLabel(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMaximumSize(QtCore.QSize(140, 16777215))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_7.addWidget(self.label_6)
        self.comboBox = QtWidgets.QComboBox(parent=self.widget)
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout_7.addWidget(self.comboBox)
        spacerItem2 = QtWidgets.QSpacerItem(183, 20, QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem2)
        self.verticalLayout_5.addLayout(self.horizontalLayout_7)
        self.widget_tempo_alteracao = QtWidgets.QWidget(parent=self.widget)
        self.widget_tempo_alteracao.setObjectName("widget_tempo_alteracao")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.widget_tempo_alteracao)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.horizontalLayout_8.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")

        self.horizontalLayout_6.addLayout(self.horizontalLayout_9)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.horizontalLayout_8.addLayout(self.horizontalLayout_6)
        self.layout_de=QtWidgets.QHBoxLayout()

        self.verticalLayout_5.addLayout(self.layout_de)
        self.verticalLayout_2.addLayout(self.verticalLayout_5)
        self.horizontalLayout_4.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem4 = QtWidgets.QSpacerItem(20, 27, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_3.addItem(spacerItem4)
        self.pushButton = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_3.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_3.addWidget(self.pushButton_3)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem5)
        self.horizontalLayout_4.addLayout(self.verticalLayout_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.layout_de.addWidget(self.widget_tempo_alteracao)
        self.salvar_versiculo = QtWidgets.QPushButton(parent=self.widget_tempo_alteracao)
        self.salvar_versiculo.setObjectName("salvar_versiculo")
        self.horizontalLayout__ = QtWidgets.QHBoxLayout()
        self.horizontalLayout__.setObjectName("horizontalLayout__")
        self.horizontalLayout__.addWidget(self.salvar_versiculo)
        self.horizontalLayout_7.addLayout(self.horizontalLayout__)
        self.salvar_versiculo.setMaximumWidth(200)
        self.horizontalLayout__.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)
                # === DEFINIR DATA E HORA ATUAL ===
        data_atual = QtCore.QDate.currentDate()
        hora_atual = QtCore.QTime.currentTime()
        self.calendarWidget.setSelectedDate(data_atual)
        self.timeEdit.setTime(hora_atual)
        # Atualiza data e hora imediatamente
        self.atualizar_data_hora()

        # Cria um timer para atualizar a cada 1 segundo
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.atualizar_data_hora)
        self.timer.start(1000)  # 1000 ms = 1 segundo


    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Widget"))
        self.label.setText(_translate("Widget", "Opçoes"))
        self.label_5.setText(_translate("Widget", "DATA  E HORA"))
        self.label_2.setText(_translate("Widget", "HORA:"))
        self.label_4.setText(_translate("Widget", "DATA:"))
        self.pushButton_4.setText(_translate("Widget", "SALVAR"))
        self.label_3.setText(_translate("Widget", "Versiculos"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Widget", "Livros \\ Capitulos"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Widget", "texto"))
        self.label_6.setText(_translate("Widget", "Versiculo Atual:"))
        self.pushButton.setText(_translate("Widget", "ADICIONAR"))
        self.pushButton_3.setText(_translate("Widget", "REMOVER"))
        self.salvar_versiculo.setText(_translate("Widget", "Salvar Alteraçoes de versiculo"))
        self.pushButton.clicked.connect(self.adicionar_linha)
        self.pushButton_3.clicked.connect(self.remover_linha)
        self.tableWidget.cellChanged.connect(self.atualizar_versiculo)
        self.carregar_versiculos()
        self.tableWidget.setColumnHidden(2,True)
        # Quando o usuário alterar a data ou a hora manualmente
        self.pushButton_4.clicked.connect(self.definir_data_hora_manual)
        self.salvar_versiculo.clicked.connect(self.salvar_versiculo_)
        
        
        self.prencher_combo()
    def carregar_versiculos(self):
        """Carrega todos os versículos da base."""
        self.tableWidget.blockSignals(True)  # evita disparar cellChanged ao preencher
        self.tableWidget.setRowCount(0)
        versiculos = listar_vesiculos()

        for v in versiculos:
            row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row)
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(v['livro']))       # Livro
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(v['versiculo']))       # Versículo
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(v['id'])))  # ID
        self.tableWidget.blockSignals(False)
    def adicionar_linha(self):
        """Adiciona um novo versículo no banco e na tabela (com proteção contra sinais)."""
        novo_id = cadastrar_vesiculo(livro="Novo Livro", versiculo="Novo Versículo")  # chama DB
        if not novo_id:
            print("Erro: cadastrar_vesiculo não retornou um id.")
            return

        # bloqueia sinais para evitar cellChanged disparado enquanto preenchemos
        self.tableWidget.blockSignals(True)
        row = self.tableWidget.rowCount()
        self.tableWidget.insertRow(row)

        # cria itens e garante que não serão None
        item_livro = QtWidgets.QTableWidgetItem("Novo Livro")
        item_vers = QtWidgets.QTableWidgetItem("Novo Versículo")
        item_id = QtWidgets.QTableWidgetItem(str(novo_id))

        self.tableWidget.setItem(row, 0, item_livro)
        self.tableWidget.setItem(row, 1, item_vers)
        self.tableWidget.setItem(row, 2, item_id)

        self.tableWidget.blockSignals(False)
        self.prencher_combo()
        
    def remover_linha(self):
        """Remove o versículo selecionado (usa coluna 2 para o id)."""
        row = self.tableWidget.currentRow()
        if row < 0:
            return

        id_item = self.tableWidget.item(row, 2)  # coluna 2 -> ID
        if id_item and id_item.text().isdigit():
            id_versiculo = int(id_item.text())
            deletar_vesiculo(id_versiculo)
            if self.parent:
               self.parent.atualizar_versiculo()
        else:
            # se não existir id (linha talvez incompleta), apenas remove visualmente
            print("Aviso: não foi possível obter o ID do versículo (removendo visualmente).")
        self.tableWidget.removeRow(row)
        self.prencher_combo()
    def atualizar_versiculo(self, row, column):
        """
        Atualiza no banco quando o texto da célula muda.
        Proteções contra células None e id faltando.
        """
        try:
            livro_item = self.tableWidget.item(row, 0)
            texto_item = self.tableWidget.item(row, 1)
            id_item = self.tableWidget.item(row, 2)

            # validações — evita .text() em None
            if id_item is None:
                print(f"Ignorado: célula ID vazia na linha {row}.")
                return
            id_text = id_item.text().strip()
            if not id_text.isdigit():
                print(f"Ignorado: ID inválido na linha {row}: '{id_text}'")
                return
            id_versiculo = int(id_text)

            livro = livro_item.text().strip() if livro_item is not None else ""
            texto = texto_item.text().strip() if texto_item is not None else ""

            # evita enviar update desnecessário caso nada tenha sido preenchido
            if livro == "" and texto == "":
                print(f"Ignorado: linha {row} vazia (sem livro e sem texto).")
                return

            editar_vesiculo(id_versiculo, livro, texto)
            # opcional: atualizar combo se nome do versículo mudou
            self.prencher_combo()
        except Exception as e:
            print("Erro ao atualizar versículo:", e)
    def prencher_combo(self):
        self.comboBox.clear()
        versiculos = listar_vesiculos()
        for v in versiculos:
            self.comboBox.addItem(f"{v['livro']} - {v['versiculo']}", v['id'])
        try:
            versiculo_atual = buscar_versiculo_atual()
            print(versiculos)
            if versiculo_atual:
                texto_atual = f"{versiculo_atual[1]} - {versiculo_atual[2]}",versiculo_atual[0]
                for i,versiculo in enumerate(versiculos):
                    print(self.comboBox.itemText(i),"==",texto_atual)
                    if self.comboBox.itemText(i) == texto_atual[0]:
                        self.comboBox.setCurrentIndex(i)
                        break
        except Exception as e:
            print("Erro ao definir versículo atual:", e)
        
    def atualizar_data_hora(self):
        """Atualiza o calendário e o timeEdit para a data e hora atuais."""
        data_atual = QtCore.QDate.currentDate()
        hora_atual = QtCore.QTime.currentTime()
        self.calendarWidget.setSelectedDate(data_atual)
        self.timeEdit.setTime(hora_atual)
    def definir_data_hora_manual(self):
        """Define a data e hora do programa manualmente a partir dos widgets."""
        # Pega a data e hora dos widgets
        data_selecionada = self.calendarWidget.selectedDate()
        hora_selecionada = self.timeEdit.time()

        # Pode converter para Python datetime, se precisar
        data_hora_manual = QtCore.QDateTime(data_selecionada, hora_selecionada)

        # Exemplo: atualizar label ou variável interna do programa
        self.data_hora_atual = data_hora_manual
        print("Data e hora definidas manualmente:", data_hora_manual.toString("yyyy-MM-dd HH:mm:ss"))
        msg=QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
        msg.setText("Data e hora atualizadas com sucesso!")
        msg.setWindowTitle("Sucesso")
        msg.exec()
    def salvar_versiculo_(self):
        versiculos = listar_vesiculos()
        id_versiculo =None
        for versiculo_ in versiculos:
            if versiculo_["id"] == self.comboBox.currentData():
               id_versiculo = versiculo_['id']

        if id_versiculo is None:
            print("Nenhum versículo selecionado.")
            return

        versiculo = buscar_vesiculo_por_id(id_versiculo)
        
        if not versiculo:
            print("Versículo não encontrado no banco.")
            return

        livro = versiculo['livro']
        texto = versiculo['versiculo']
        
        # Adiciona meses e dias
        
        inserir_versiculo_atual(livro, texto)
        inserir_versiculo_atual(livro, texto,)
        if self.parent:
            self.parent.atualizar_versiculo()

        
 