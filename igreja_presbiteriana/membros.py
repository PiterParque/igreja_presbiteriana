# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from conect_banco import  (mostrar_membros_all,desativar_ativar,
 buscar_professo_por_nome,buscar_nome_menor,buscar_nome_agregado,mostrar_junta_diagonal,
 remover_professo_da_junta,mostrar_conselho,remover_professo_do_conselho,buscar_desativado,autenticar_usuario)
from editar_professo import Ui_edicao_professos
from cadastro_professos import Ui_cadastrar_professo
from cadastro_menores import Ui_cadastro_menores
from cadastro_agregados import Ui_cadastro_agrgados
from editar_menores import Ui_editar_menores
from editar_agregado import Ui_editar_agregado
from adicionar_membro_diagonal import Ui_adicioanar_membro_diagonal
from adicionar_conselho import Ui_adicionar_conselho


class Ui_membros(QtWidgets.QWidget):
    def __init__(self,usuario):
        super().__init__()
        self.usuario=usuario
        self.id_usuario=usuario['id']
        self.nome_usuario=usuario['nome']
        self.senha=usuario['senha']
        try:
            retorno=autenticar_usuario(self.nome_usuario,self.senha)
            if retorno[0]:
                self.setupUi(self)
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                msg.setText("Erro de autenticação")
                msg.setWindowTitle("Erro")
                msg.exec()
        except Exception as e:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                msg.setText("Erro em executar a tela de inicio")
                msg.setWindowTitle("Erro")
                msg.exec()
                print("O erro e :",e)
        
    def setupUi(self, Widget):
        Widget.setObjectName("membros_inicial")
        Widget.resize(1298, 421)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        Widget.setFont(font)
        self.widget = QtWidgets.QWidget(parent=Widget)
        self.widget.setObjectName("widget")
        self.layout_principal = QtWidgets.QVBoxLayout(Widget)
        self.layout_principal.setContentsMargins(0, 0, 0, 0)
        self.layout_principal.setObjectName("layout_principal")
        self.titulo_gestao = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.titulo_gestao.setFont(font)
        self.titulo_gestao.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.titulo_gestao.setObjectName("titulo_gestao")
        self.layout_principal.addWidget(self.titulo_gestao)
        self.layout_pricipal_membros = QtWidgets.QHBoxLayout()
        self.layout_pricipal_membros.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.layout_pricipal_membros.setSpacing(13)
        self.layout_pricipal_membros.setObjectName("layout_pricipal_membros")
        self.menu_membros = QtWidgets.QVBoxLayout()
        self.menu_membros.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetFixedSize)
        self.menu_membros.setSpacing(12)
        self.menu_membros.setObjectName("menu_membros")
        self.titulo_membro = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("72")
        font.setPointSize(18)
        font.setBold(True)
        self.titulo_membro.setFont(font)
        self.titulo_membro.setObjectName("titulo_membro")
        self.menu_membros.addWidget(self.titulo_membro)
        self.professos = QtWidgets.QPushButton(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.professos.sizePolicy().hasHeightForWidth())
        self.professos.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.professos.setFont(font)
        self.professos.setObjectName("professos")
        self.menu_membros.addWidget(self.professos)
        self.menores = QtWidgets.QPushButton(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menores.sizePolicy().hasHeightForWidth())
        self.menores.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.menores.setFont(font)
        self.menores.setObjectName("menores")
        self.menu_membros.addWidget(self.menores)
        self.agregados = QtWidgets.QPushButton(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.agregados.sizePolicy().hasHeightForWidth())
        self.agregados.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.agregados.setFont(font)
        self.agregados.setAutoDefault(False)
        self.agregados.setDefault(False)
        self.agregados.setObjectName("agregados")
        self.menu_membros.addWidget(self.agregados)
        spacerItem = QtWidgets.QSpacerItem(20, 157, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.menu_membros.addItem(spacerItem)
        self.layout_pricipal_membros.addLayout(self.menu_membros)
        self.widget_tabela_busca = QtWidgets.QWidget(parent=self.widget)
        self.widget_tabela_busca.setObjectName("widget_tabela_busca")
        self.layout_tabela_busca = QtWidgets.QVBoxLayout(self.widget_tabela_busca)
        self.layout_tabela_busca.setObjectName("layout_tabela_busca")
        self.layout_buscar = QtWidgets.QHBoxLayout()
        self.layout_buscar.setObjectName("layout_buscar")
        self.label = QtWidgets.QLabel(parent=self.widget_tabela_busca)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.layout_buscar.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(parent=self.widget_tabela_busca)
        self.comboBox.setObjectName("comboBox")
        self.layout_buscar.addWidget(self.comboBox)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.widget_tabela_busca)
        self.lineEdit.setObjectName("lineEdit")
        self.layout_buscar.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(parent=self.widget_tabela_busca)
        self.pushButton.setObjectName("pushButton")
        self.layout_buscar.addWidget(self.pushButton)
        self.layout_tabela_busca.addLayout(self.layout_buscar)
        self.layout_tabela = QtWidgets.QHBoxLayout()
        self.layout_tabela.setObjectName("layout_tabela")
        self.tabela_membros = QtWidgets.QTableWidget(parent=self.widget_tabela_busca)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(41)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.tabela_membros.sizePolicy().hasHeightForWidth())
        self.tabela_membros.setSizePolicy(sizePolicy)
        self.tabela_membros.setMinimumSize(QtCore.QSize(34, 13))
        self.tabela_membros.setSizeIncrement(QtCore.QSize(0, 0))
        self.tabela_membros.setBaseSize(QtCore.QSize(0, 0))
        #adiciona colunas
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        self.tabela_membros.setFont(font)
        self.tabela_membros.setObjectName("tabela_membros")


        #--------------------------------------------------------
        self.tabela_membros.horizontalHeader().setCascadingSectionResizes(False)
        self.tabela_membros.horizontalHeader().setDefaultSectionSize(129)
        self.tabela_membros.horizontalHeader().setHighlightSections(False)
        self.tabela_membros.horizontalHeader().setMinimumSectionSize(29)
        self.tabela_membros.horizontalHeader().setSortIndicatorShown(False)
        self.tabela_membros.horizontalHeader().setStretchLastSection(False)
        self.tabela_membros.verticalHeader().setVisible(False)
        self.tabela_membros.verticalHeader().setCascadingSectionResizes(False)
        self.tabela_membros.verticalHeader().setSortIndicatorShown(False)
        self.tabela_membros.verticalHeader().setStretchLastSection(False)
        self.layout_tabela.addWidget(self.tabela_membros)
        self.layout_CRUD_membros = QtWidgets.QVBoxLayout()
        self.layout_CRUD_membros.setObjectName("layout_CRUD_membros")
        self.criar_membro = QtWidgets.QPushButton(parent=self.widget_tabela_busca)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.criar_membro.sizePolicy().hasHeightForWidth())
        self.criar_membro.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.criar_membro.setFont(font)
        self.criar_membro.setObjectName("criar_membro")
        self.layout_CRUD_membros.addWidget(self.criar_membro)
        self.editar_membro = QtWidgets.QPushButton(parent=self.widget_tabela_busca)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.editar_membro.sizePolicy().hasHeightForWidth())
        self.editar_membro.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.editar_membro.setFont(font)
        self.editar_membro.setObjectName("editar_membro")
        self.layout_CRUD_membros.addWidget(self.editar_membro)
        self.desativar_ativar_membro = QtWidgets.QPushButton(parent=self.widget_tabela_busca)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.desativar_ativar_membro.sizePolicy().hasHeightForWidth())
        self.desativar_ativar_membro.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.desativar_ativar_membro.setFont(font)
        self.desativar_ativar_membro.setObjectName("desativar_ativar_membro")
        self.layout_CRUD_membros.addWidget(self.desativar_ativar_membro)
        spacerItem1 = QtWidgets.QSpacerItem(20, 148, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.layout_CRUD_membros.addItem(spacerItem1)
        self.layout_tabela.addLayout(self.layout_CRUD_membros)
        self.layout_tabela_busca.addLayout(self.layout_tabela)
        self.layout_pricipal_membros.addWidget(self.widget_tabela_busca)
        self.layout_principal.addLayout(self.layout_pricipal_membros)
        self.linha_divisoria = QtWidgets.QFrame(parent=self.widget)
        self.linha_divisoria.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.linha_divisoria.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.linha_divisoria.setObjectName("linha_divisoria")
        self.layout_principal.addWidget(self.linha_divisoria)
        self.menu_grupos = QtWidgets.QHBoxLayout()
        self.menu_grupos.setObjectName("menu_grupos")
        self.titulo_grupos = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("72")
        font.setPointSize(18)
        font.setBold(True)
        self.titulo_grupos.setFont(font)
        self.titulo_grupos.setObjectName("titulo_grupos")
        self.menu_grupos.addWidget(self.titulo_grupos)
        spacerItem2 = QtWidgets.QSpacerItem(11, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.menu_grupos.addItem(spacerItem2)
        self.junta_diagonal = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.junta_diagonal.setFont(font)
        self.junta_diagonal.setObjectName("junta_diagonal")
        self.menu_grupos.addWidget(self.junta_diagonal)
        self.conselho = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.conselho.setFont(font)
        self.conselho.setObjectName("conselho")
        self.menu_grupos.addWidget(self.conselho)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.menu_grupos.addItem(spacerItem3)
        self.layout_principal.addLayout(self.menu_grupos)
        self.widget_integrantes_grupos = QtWidgets.QWidget(parent=self.widget)
        self.widget_integrantes_grupos.setObjectName("widget_integrantes_grupos")
        self.layout_pricipal_grupos = QtWidgets.QVBoxLayout(self.widget_integrantes_grupos)
        self.layout_pricipal_grupos.setObjectName("layout_pricipal_grupos")
        self.adicionar_remover_membro = QtWidgets.QWidget(parent=self.widget_integrantes_grupos)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(8)
        sizePolicy.setHeightForWidth(self.adicionar_remover_membro.sizePolicy().hasHeightForWidth())
        self.adicionar_remover_membro.setSizePolicy(sizePolicy)
        self.adicionar_remover_membro.setObjectName("adicionar_remover_membro")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.adicionar_remover_membro)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.titulo_integrantes = QtWidgets.QLabel(parent=self.adicionar_remover_membro)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.titulo_integrantes.sizePolicy().hasHeightForWidth())
        self.titulo_integrantes.setSizePolicy(sizePolicy)
        self.titulo_integrantes.setMaximumSize(QtCore.QSize(16777215, 16777214))
        font = QtGui.QFont()
        font.setFamily("72")
        font.setPointSize(14)
        font.setBold(True)
        self.titulo_integrantes.setFont(font)
        self.titulo_integrantes.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.titulo_integrantes.setObjectName("titulo_integrantes")
        self.horizontalLayout_3.addWidget(self.titulo_integrantes)
        self.lista_integrantes = QtWidgets.QTableWidget(parent=self.adicionar_remover_membro)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lista_integrantes.sizePolicy().hasHeightForWidth())
        self.lista_integrantes.setSizePolicy(sizePolicy)
        self.lista_integrantes.setObjectName("lista_integrantes")
        self.horizontalLayout_3.addWidget(self.lista_integrantes)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.adicionar_membro = QtWidgets.QPushButton(parent=self.adicionar_remover_membro)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.adicionar_membro.setFont(font)
        self.adicionar_membro.setObjectName("adicionar_membro")
        self.verticalLayout.addWidget(self.adicionar_membro)
        self.remover_membro = QtWidgets.QPushButton(parent=self.adicionar_remover_membro)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.remover_membro.setFont(font)
        self.remover_membro.setObjectName("remover_membro")
        self.verticalLayout.addWidget(self.remover_membro)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem4)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.layout_pricipal_grupos.addWidget(self.adicionar_remover_membro)
        self.layout_principal.addWidget(self.widget_integrantes_grupos)
        self.desativar_ativar_membro.clicked.connect(self.desativar_ativar_clicado)
        self.forma_de_admissao=QtWidgets.QWidget
        self.retranslateUi(Widget)
        
        QtCore.QMetaObject.connectSlotsByName(Widget)

    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Widget"))
        self.titulo_gestao.setText(_translate("Widget", "Gestão de membros e grupos"))
        self.titulo_membro.setText(_translate("Widget", "Membros"))
        self.professos.setText(_translate("Widget", "Professos"))
        self.menores.setText(_translate("Widget", "Menores"))
        self.agregados.setText(_translate("Widget", "agregados"))
        self.label.setText(_translate("Widget", "Buscar:"))
        self.pushButton.setText(_translate("Widget", "pesquisar"))

        
        self.criar_membro.setText(_translate("Widget", "Criar"))
        self.editar_membro.setText(_translate("Widget", "Editar"))
        self.desativar_ativar_membro.setText(_translate("Widget", "Deletar"))
        self.titulo_grupos.setText(_translate("Widget", "Grupos"))
        self.junta_diagonal.setText(_translate("Widget", "Junta Diaconal"))
        self.conselho.setText(_translate("Widget", "Conselho"))
        self.titulo_integrantes.setText(_translate("Widget", "Integrantes"))
        self.adicionar_membro.setText(_translate("Widget", "Adicionar"))
        self.remover_membro.setText(_translate("Widget", "Remover"))
        self.tabela_membros.cellClicked.connect(self.celula_clicada)
        self.editar_membro.setVisible(False)
        self.desativar_ativar_membro.setVisible(False)
        self.editar_membro.clicked.connect(self.editar_membro_clicado)
        self.widget_tabela_busca.setVisible(False)
        self.estado=''
        self.estado_lista_intgrantes=''
        self.colunas=[]
        self.layout_pricipal_membros.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
        self.professos.clicked.connect(self.Professos)
        self.menores.clicked.connect(self.Menores)
        self.agregados.clicked.connect(self.Agregados)
        self.cadastro_professo=Ui_cadastrar_professo(parent=self)
        self.cadastro_menores=Ui_cadastro_menores(parent=self)
        self.cadatro_agregados=Ui_cadastro_agrgados(parent=self)
        self.criar_membro.clicked.connect(self.cadastrar_membro)
        #JUNTA DIAGONAL
        self.widget_integrantes_grupos.setVisible(False)
        self.junta_diagonal.clicked.connect(self.junta_diagonal_janela)
        self.conselho.clicked.connect(self.conselho_janela)
        self.adicionar_membro.clicked.connect(self.adicionar_integrante)
        self.remover_membro.clicked.connect(self.remover)
        self.pushButton.clicked.connect(self.pesquisar)
        
        
        
    def Professos(self):
        self.estado='Professo'
        self.widget_tabela_busca.setVisible(True)
        self.prencher_tabela()
    def Menores(self):
        self.estado='Menores'
        self.widget_tabela_busca.setVisible(True)
        self.prencher_tabela()
    def Agregados(self):
        self.estado='Agregados'
        self.widget_tabela_busca.setVisible(True)
        self.prencher_tabela()
    def cadastrar_membro(self):
        if  self.estado == 'Professo':
            self.cadastro_professo.show()
        elif self.estado ==  'Menores':
            self.cadastro_menores.show()
        elif self.estado ==  'Agregados':
            self.cadatro_agregados.show()
        else:
            print('estado não encotrado')
         
    def prencher_tabela(self):
        _translate = QtCore.QCoreApplication.translate

        #Criando colunas
        def criarcolunas(lista=list,dados=dict):
            colunas=lista
            self.tabela_membros.setColumnCount(len(colunas))
            self.tabela_membros.setRowCount(0)
            for coluna,campo in enumerate(colunas):
                item = QtWidgets.QTableWidgetItem()
                self.tabela_membros.setHorizontalHeaderItem(coluna, item)
                item = self.tabela_membros.horizontalHeaderItem(coluna)
                item.setText(_translate("Widget",campo))
            #Inserindo dados nas colunas
            for linha,professo in enumerate(dados.keys()):
                print("linha:",linha)
                self.tabela_membros.insertRow(linha) 
                for coluna,val in enumerate((dados[professo]).keys()):
                    valor=dados[professo][val]
                    if valor == '':
                        valor='*'
                    if val == 'ativo':
                        ano,mes,dia=str(buscar_desativado(estado=self.estado,id=professo)[0][3][0:10]).split("-")
                        data_formatada = f"{dia}/{mes}/{ano}"
                        if valor == "não": valor= valor+ " (Destivado desde de "+ data_formatada+")"

                    item = QtWidgets.QTableWidgetItem(str(valor))
                    self.tabela_membros.setItem(linha, coluna, item)
                    

        if self.estado == "Professo":
            self.tabela_membros.setColumnCount(0)
            colunas=["","NOME","ENDEREÇO","DATA DE PPFB","DATA DE NASCIMNETO","IDENTIDADE","CPF","TELEFONE","FORMA DE ADMISSÃO","GENERO","ATIVO"]
            dados=mostrar_membros_all(estado=self.estado)
            criarcolunas(lista=colunas,dados=dados)
            colunas.remove("")
            self.colunas=colunas
            
        elif self.estado == 'Menores':
            self.tabela_membros.setColumnCount(0)
            dados=mostrar_membros_all(estado=self.estado)
            colunas=["","NOME","NOME DO PAI","NOME DA MÃE","RESPONSAVEL","TELEFONE","DATA DE NASCIMENTO","ATIVO"]
            dados=mostrar_membros_all(estado=self.estado)
            criarcolunas(lista=colunas,dados=dados)
            colunas.remove("")
            self.colunas=colunas
        elif self.estado == 'Agregados':
            self.tabela_membros.setColumnCount(0)
            dados=mostrar_membros_all(estado=self.estado)
            colunas=["","NOME","TELEFONE","ENDEREÇO","ATIVO"]
            dados=mostrar_membros_all(estado=self.estado)
            criarcolunas(lista=colunas,dados=dados)
            colunas.remove("")
            self.colunas=colunas
        else:
            print("estado não encontrado")
        self.comboBox.clear()
        self.comboBox.addItems(self.colunas)
        self.lineEdit.clear()

        self.tabela_membros.setColumnHidden(0, True)
        
    def celula_clicada(self):
        if self.tabela_membros.currentItem():
            linha=self.tabela_membros.currentRow()
            coluna=self.tabela_membros.currentColumn()
            ativado_desativado=self.tabela_membros.item(linha,coluna)
            if self.estado == "Professo":
                colunas_professos=["NOME","ENDEREÇO","DATA DE PPFB","IDENTIDADE","CPF","TELEFONE","TRANSFERIDO","IGREJA DE ORIGEM","DATA DE TRANSFERENCIA","ATIVO"]
                ativado_desativado=self.tabela_membros.item(linha,(len(colunas_professos)))
                self.colunas=len(colunas_professos)
            elif self.estado == "Menores":
                 colunas_menores=["NOME","NOME DO PAI","NOME DA MÃE","RESPONSAVEL","TELEFONE","DATA DE NASCIMENTO","ATIVO"]
                 ativado_desativado=self.tabela_membros.item(linha,(len(colunas_menores)))
                 self.colunas=len(colunas_menores)
            elif self.estado ==   "Agregados":
                colunas_agregados=["NOME","TELEFONE","ENDEREÇO","ATIVO"]
                ativado_desativado=self.tabela_membros.item(linha,(len(colunas_agregados)))
                self.colunas=len(colunas_agregados)
            else:
                print("estado de ativo não encontrado")
            if ativado_desativado.text() =='sim':
                self.desativar_ativar_membro.setText("Desativar")
            else:
                self.desativar_ativar_membro.setText("Ativar")
            item=self.tabela_membros.item(linha,0)
            self.editar_membro.setVisible(True)
            self.desativar_ativar_membro.setVisible(True)
    def editar_membro_clicado(self):
        if self.estado == "Professo":
            linha=self.tabela_membros.currentRow()
            item=self.tabela_membros.item(linha,1)
            if item:
                self.editar_professo=Ui_edicao_professos(nome=item.text(),parent=self)
                self.editar_professo.show()
            else:
                msg=QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                msg.setWindowTitle("Erro")
                msg.setText("Selecione um professo para editar")
                msg.exec()
        elif self.estado == "Menores":
            linha=self.tabela_membros.currentRow()
            item=self.tabela_membros.item(linha,1)
            print(item.text())
            if item:
                self.editar_menor=Ui_editar_menores(nome_menor=item.text(),parent=self)
                self.editar_menor.show()
            else:
                msg=QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                msg.setWindowTitle("Erro")
                msg.setText("Selecione um menor para editar")
                msg.exec()
        elif self.estado ==   "Agregados":
            linha=self.tabela_membros.currentRow()
            item=self.tabela_membros.item(linha,1)
            if item:
                self.editar_menor=Ui_editar_agregado(nome=item.text(),parent=self)
                self.editar_menor.show()
            else:
                msg=QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                msg.setWindowTitle("Erro")
                msg.setText("Selecione um agregado para editar")
                msg.exec()
        else:
            print("estado não encontrado")
        
    def desativar_ativar_clicado(self):
        linha=self.tabela_membros.currentRow()
        
        item=self.tabela_membros.item(linha,1)
        msg=QtWidgets.QMessageBox()
        msg.destroyed.connect(self.prencher_tabela)
        if item:
            nome=item.text()
            id=''
            if  self.estado == 'Professo':
                dados=buscar_professo_por_nome(nome=nome)
                id=dados['id_professo']
            elif self.estado ==  'Menores':
                dados=buscar_nome_menor(nome=nome)
                id=dados['id_menor']
            elif self.estado ==  'Agregados':
                dados=buscar_nome_agregado(nome=nome)
                id=dados['id_agregado']
            else:
               print('estado não encotrado')
            
            if dados:
                
                ativo=dados['ativo']
                ativado='Desativado'
                if ativo=='sim':
                    novo_status=False
                    ativo='não'
                    ativado='Desativado'
                else:
                    novo_status=True
                    ativo='sim'
                    ativado='Ativado'
                sucesso=desativar_ativar(id,novo_status,estado=self.estado)
                if sucesso:
                    
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    msg.setWindowTitle("Sucesso")
                    msg.setText(f"Professo {ativado} com sucesso")
                    
                    msg.exec()
                    
                else:
            
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    msg.setWindowTitle("Erro")
                    msg.setText("Erro ao atualizar status do professo")
                    msg.exec()
            else:
               
                msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                msg.setWindowTitle("Erro")
                msg.setText("Erro ao encontrar dados do professo")
                msg.exec()
        else:
            
            msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            msg.setWindowTitle("Erro")
            msg.setText("Selecione um professo para editar")
            msg.exec()
    #junta Diagonal
    def junta_diagonal_janela(self):
        self.estado='junta_diagonal'
        self.lista_integrantes.clear()
        self.widget_integrantes_grupos.setVisible(True)
        integrates=mostrar_junta_diagonal()
        self.nome_id={}
        _translate = QtCore.QCoreApplication.translate
        colunas=['NOME','CPF','DATA DE ENTRDA','DATA DE VENCIMENTO']
        self.lista_integrantes.setColumnCount(len(colunas))
        self.lista_integrantes.setRowCount(0)
        for coluna,campo in enumerate(colunas):
                item = QtWidgets.QTableWidgetItem()
                self.lista_integrantes.setHorizontalHeaderItem(coluna, item)
                item = self.lista_integrantes.horizontalHeaderItem(coluna)
                item.setText(_translate("Widget",campo))
        for i,integrante in enumerate(integrates.keys()):
                self.lista_integrantes.insertRow(i)
                co_relacao={'NOME':'nome','CPF':'cpf','DATA DE ENTRDA':'data_entrada','DATA DE VENCIMENTO':'data_saida'}
                for x,colune in enumerate(co_relacao.keys()):
                    item = QtWidgets.QTableWidgetItem(str(integrates[integrante][co_relacao[colune]]))
                    self.lista_integrantes.setItem(i, x, item)
    def conselho_janela(self):
        self.estado='conselho'
        self.lista_integrantes.clear()
        self.widget_integrantes_grupos.setVisible(True)
        integrates=mostrar_conselho()
        self.nome_id={}
        _translate = QtCore.QCoreApplication.translate
        colunas=['NOME','CPF','DATA DE ENTRDA','DATA DE VENCIMENTO']
        self.lista_integrantes.setColumnCount(len(colunas))
        self.lista_integrantes.setRowCount(0)
        for coluna,campo in enumerate(colunas):
                item = QtWidgets.QTableWidgetItem()
                self.lista_integrantes.setHorizontalHeaderItem(coluna, item)
                item = self.lista_integrantes.horizontalHeaderItem(coluna)
                item.setText(_translate("Widget",campo))
        for i,integrante in enumerate(integrates.keys()):
                self.lista_integrantes.insertRow(i)
                co_relacao={'NOME':'nome','CPF':'cpf','DATA DE ENTRDA':'data_entrada','DATA DE VENCIMENTO':'data_saida'}
                for x,colune in enumerate(co_relacao.keys()):
                    item = QtWidgets.QTableWidgetItem(str(integrates[integrante][co_relacao[colune]]))
                    self.lista_integrantes.setItem(i, x, item)
        # self.estado='conselho'
        # self.lista_integrantes.clear()
        # self.widget_integrantes_grupos.setVisible(True)
        # integrates=mostrar_conselho()
        # self.nome_id={}
        # for integrate in integrates.keys():
        #     self.lista_integrantes.addItem(str(integrates[integrate]['nome']))
        #     self.nome_id[str(integrates[integrate]['nome'])]=integrate
    def adicionar_integrante(self):
        if self.estado == 'junta_diagonal':
            self.adicionar=Ui_adicioanar_membro_diagonal(parent=self)
            self.adicionar.show()
        elif self.estado == 'conselho':
            self.adicioanr_conselho=Ui_adicionar_conselho(parent=self)
            self.adicioanr_conselho.show()

    def remover(self):
        msg=QtWidgets.QMessageBox()
        msg.destroyed.connect(self.junta_diagonal_janela)
        item=self.lista_integrantes.currentItem()
        if item:
            if self.estado == 'junta_diagonal':
              retorno=remover_professo_da_junta(id_junta=self.nome_id[(item.text())])
              if retorno:
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    msg.setWindowTitle("Sucesso")
                    msg.setText(f"Integrante Removido com sucesso")
                    msg.exec()
              else:
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    msg.setWindowTitle("Erro")
                    msg.setText("Falha na remoção do integrante")
                    msg.exec()
              

            elif self.estado == 'conselho':
              retorno=remover_professo_do_conselho(id_conselho=self.nome_id[(item.text())])
              if retorno:
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    msg.setWindowTitle("Sucesso")
                    msg.setText(f"Integrante Removido com sucesso")
                    msg.exec()
              else:
                    msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    msg.setWindowTitle("Erro")
                    msg.setText("Falha na remoção do integrante")
                    msg.exec()
              ...
            else:
                print('estado não encotrado')
    def pesquisar(self):
            criterio = self.comboBox.currentText()   # nome, CPF ou IDENTIDADE
            termo = self.lineEdit.text().strip()     # texto digitado

            if not termo:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                msg.setWindowTitle("Aviso")
                msg.setText("Digite algo para pesquisar.")
                msg.exec()
                return

            # 🔹 Verifica o estado atual (Professos, Menores, Agregados)
            if self.estado == "Professo":
                dados = mostrar_membros_all(estado=self.estado)

                # Filtra os dados pelo critério escolhido
                filtrados = {}
                for k, v in dados.items():
                    if criterio.lower() in v.keys():
                        if termo.lower() in str(v[criterio.lower()]).lower():
                            filtrados[k] = v

                self.tabela_membros.setRowCount(0)
                colunas = ["","NOME","ENDEREÇO","DATA DE PPFB","DATA DE NASCIMNETO",
                        "IDENTIDADE","CPF","TELEFONE","FORMA DE ADMISSÃO","GENERO","ATIVO"]
                self.prencher_tabela_filtrada(colunas, filtrados)

            elif self.estado == "Menores":
                dados = mostrar_membros_all(estado=self.estado)
                filtrados = {k:v for k,v in dados.items() if termo.lower() in str(v['nome']).lower()}
                colunas=["NOME","NOME DO PAI","NOME DA MÃE","RESPONSAVEL","TELEFONE","DATA DE NASCIMENTO","ATIVO"]
                self.prencher_tabela_filtrada(colunas, filtrados)

            elif self.estado == "Agregados":
                dados = mostrar_membros_all(estado=self.estado)
                filtrados = {k:v for k,v in dados.items() if termo.lower() in str(v['nome']).lower()}
                colunas=["NOME","TELEFONE","ENDEREÇO","ATIVO"]
                self.prencher_tabela_filtrada(colunas, filtrados)

            else:
                print("estado não encontrado")

    def prencher_tabela_filtrada(self, colunas, dados):
        _translate = QtCore.QCoreApplication.translate
        self.tabela_membros.setColumnCount(len(colunas))
        self.tabela_membros.setRowCount(0)
        for coluna, campo in enumerate(colunas):
            item = QtWidgets.QTableWidgetItem()
            self.tabela_membros.setHorizontalHeaderItem(coluna, item)
            item = self.tabela_membros.horizontalHeaderItem(coluna)
            item.setText(_translate("Widget", campo))
        for linha, professo in enumerate(dados.keys()):
            self.tabela_membros.insertRow(linha)
            for coluna, val in enumerate(dados[professo].values()):
                item = QtWidgets.QTableWidgetItem(str(val))
                self.tabela_membros.setItem(linha, coluna, item)


       
   
       

