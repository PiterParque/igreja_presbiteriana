# Form implementation generated from reading ui file 'gestao_finaceira.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from movimento_finaceira import Ui_movimento_financeiro
from conect_banco import mostrar_movimentos, valor_atual,mostrar_movimentos_periodo,autenticar_usuario
from PyQt6.QtWidgets import QMenu,QInputDialog
from manipulando_planilha import gerar_relatorio
from PyQt6.QtWidgets import QMessageBox ,QFileDialog 
import openpyxl
from openpyxl.utils import get_column_letter



class Ui_gestao_financeira(QtWidgets.QWidget):
    def __init__(self,usuario):
        super().__init__()
        self.usuario=usuario
        self.id_usuario=usuario['id']
        self.nome_usuario=usuario['nome']
        self.senha=usuario['senha']
        try:
            retorno=autenticar_usuario(self.nome_usuario,self.senha)
            if retorno[0]:
                self.setupUi(self)
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                msg.setText("Erro de autenticação")
                msg.setWindowTitle("Erro")
                msg.exec()
        except Exception as e:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                msg.setText("Erro em executar a tela de inicio")
                msg.setWindowTitle("Erro")
                msg.exec()
                print("O erro e :",e)
        
    def setupUi(self, Widget):
        Widget.setObjectName("gestao_financeira")
        Widget.resize(789, 341)
        self.widget = QtWidgets.QWidget(parent=Widget)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(Widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.titulo = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        self.titulo.setFont(font)
        self.titulo.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.titulo.setObjectName("titulo")
        self.verticalLayout.addWidget(self.titulo)
        self.layout_valoR_igreja = QtWidgets.QHBoxLayout()
        self.layout_valoR_igreja.setObjectName("layout_valoR_igreja")
        self.label_2 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.layout_valoR_igreja.addWidget(self.label_2)
        self.salado_igreja = QtWidgets.QLineEdit(parent=self.widget)
        self.salado_igreja.setObjectName("salado_igreja")
        self.layout_valoR_igreja.addWidget(self.salado_igreja)
        self.movimento_financeiro = QtWidgets.QPushButton(parent=self.widget)
        self.movimento_financeiro.setObjectName("movimento_financeiro")
        self.layout_valoR_igreja.addWidget(self.movimento_financeiro)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.layout_valoR_igreja.addItem(spacerItem)
        self.verticalLayout.addLayout(self.layout_valoR_igreja)
        self.layout_perido = QtWidgets.QHBoxLayout()
        self.layout_perido.setObjectName("layout_perido")
        self.label_3 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.layout_perido.addWidget(self.label_3)
        self.inicio = QtWidgets.QDateEdit(parent=self.widget)
        self.inicio.setObjectName("inicio_data_periodo")
        self.layout_perido.addWidget(self.inicio)
        self.label_4 = QtWidgets.QLabel(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.layout_perido.addWidget(self.label_4)
        self.fim = QtWidgets.QDateEdit(parent=self.widget)
        self.fim.setObjectName("fim")
        self.layout_perido.addWidget(self.fim)
        self.pushButton = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton.setObjectName("pushButton")
        self.layout_perido.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.layout_perido.addWidget(self.pushButton_2)
        self.pushButton_exportar = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_exportar.setObjectName("pushButton_exportar")
        self.pushButton_exportar.setText("Exportar para Excel")
        self.layout_perido.addWidget(self.pushButton_exportar)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.layout_perido.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.layout_perido)
        self.tabela_perido_finaceiro = QtWidgets.QTableWidget(parent=self.widget)
        self.tabela_perido_finaceiro.setTabletTracking(False)
        self.tabela_perido_finaceiro.setObjectName("tabela_perido_finaceiro")
        self.tabela_perido_finaceiro.setColumnCount(5)
        self.tabela_perido_finaceiro.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tabela_perido_finaceiro.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabela_perido_finaceiro.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabela_perido_finaceiro.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabela_perido_finaceiro.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabela_perido_finaceiro.setHorizontalHeaderItem(4, item)
        self.verticalLayout.addWidget(self.tabela_perido_finaceiro)
        self.movimento_financeiro.clicked.connect(self.abrir_tela_movimento)
        self.pushButton.clicked.connect(self.buscar_dados)
        self.retranslateUi(Widget)
        self.tabela_perido_finaceiro.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.setup_header_context_menu()
        self.salado_igreja.setReadOnly(True)
        self.pushButton_2.clicked.connect(self.gerar_ralatorios)
        self.pushButton_exportar.clicked.connect(self.exportar_para_excel)
        QtCore.QMetaObject.connectSlotsByName(Widget)

    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Widget"))
        self.titulo.setText(_translate("Widget", "Gestão Financeira"))
        self.label_2.setText(_translate("Widget", "Valor Atual da Igreja:"))
        self.movimento_financeiro.setText(_translate("Widget", "MOVIMENTO FINANACEIRO"))
        self.label_3.setText(_translate("Widget", "Periodo de "))
        self.label_4.setText(_translate("Widget", "A"))
        self.pushButton.setText(_translate("Widget", "BUSCAR"))
        self.pushButton_2.setText(_translate("Widget", "Gerar relatório"))
        item = self.tabela_perido_finaceiro.horizontalHeaderItem(0)
        item.setText(_translate("Widget", "DATA"))
        item = self.tabela_perido_finaceiro.horizontalHeaderItem(1)
        item.setText(_translate("Widget", "MOVIMENTO"))
        item = self.tabela_perido_finaceiro.horizontalHeaderItem(2)
        item.setText(_translate("Widget", "TIPO DE MOVIMENTO"))
        item = self.tabela_perido_finaceiro.horizontalHeaderItem(3)
        item.setText(_translate("Widget", "VALOR"))
        item = self.tabela_perido_finaceiro.horizontalHeaderItem(4)
        item.setText(_translate("Widget", "OBSERVAÇÃO"))
        self.salado_igreja.setText(_translate("Widget", str(valor_atual()[0])))
        self.preencher_tabela()
        hoje = QtCore.QDate.currentDate()
        self.inicio.setDate(hoje.addYears(-1))
        self.fim.setDate(hoje)
    def preencher_tabela(self):
        self.tabela_perido_finaceiro.clearContents()
        dados = mostrar_movimentos()

        colunas = ["data", "movimento", "tipo_movimento", "valor", "obs"]  # chaves do dicionário
        self.tabela_perido_finaceiro.setRowCount(len(dados))
   
        for linha, registro in enumerate(dados.values()):
            for coluna, chave in enumerate(colunas):
                valor = registro.get(chave, "")
                celula = QtWidgets.QTableWidgetItem(str(valor))
                self.tabela_perido_finaceiro.setItem(linha, coluna, celula)
        

    def abrir_tela_movimento(self):
        self.ui=Ui_movimento_financeiro(parent=self)
        self.ui.show()
    def atualizar_valor(self):
        self.salado_igreja.setText(str(valor_atual()[0]))
    def buscar_dados(self):
        inicio=self.inicio.date().toPyDate()
        fim=self.fim.date().toPyDate()
        self.tabela_perido_finaceiro.clearContents()
        dados=mostrar_movimentos_periodo(inicio,fim)
        self.tabela_perido_finaceiro.setRowCount(len(dados.keys()))
        for linha, row_data in enumerate(dados.keys()):
            for coluna, item in enumerate(dados[row_data].values()):
                celula=QtWidgets.QTableWidgetItem(str(item))
                self.tabela_perido_finaceiro.setItem(linha,coluna,celula)


    def setup_header_context_menu(self):
        header = self.tabela_perido_finaceiro.horizontalHeader()
        header.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        header.customContextMenuRequested.connect(self.header_context_menu)

    def header_context_menu(self, pos):
        header = self.tabela_perido_finaceiro.horizontalHeader()
        coluna = header.logicalIndexAt(pos)
        if coluna < 0:
            return

        # Pega os valores únicos da coluna
        valores_unicos = set()
        for row in range(self.tabela_perido_finaceiro.rowCount()):
            item = self.tabela_perido_finaceiro.item(row, coluna)
            if item:
                valores_unicos.add(item.text())

        menu = QMenu()
        filtrar_action_dict = {}  # para mapear ações
        for valor in sorted(valores_unicos):
            action = menu.addAction(valor)
            filtrar_action_dict[action] = valor

        limpar_action = menu.addAction("Limpar filtros")

        action = menu.exec(header.mapToGlobal(pos))
        if action == limpar_action:
            self.preencher_tabela()  # recarrega todos os dados
        elif action in filtrar_action_dict:
            valor_selecionado = filtrar_action_dict[action]
            self.filtrar_coluna_por_valor(coluna, valor_selecionado)

    def filtrar_coluna_por_valor(self, coluna, valor):
        # Obtém todos os dados
        dados = mostrar_movimentos()  # ou dados que você já tem carregados
        filtrados = {}

        for key, row in dados.items():
            chave_coluna = list(row.keys())[coluna]
            if str(row[chave_coluna]) == str(valor):
                filtrados[key] = row

        # Preenche a tabela filtrada
        self.preencher_tabela_filtrada(list(dados[key].keys()), filtrados)
    def preencher_tabela_filtrada(self, colunas, dados):
        """
        Preenche a tabela financeira com os dados filtrados.
        colunas: lista com os nomes das colunas
        dados: dicionário com os dados filtrados
        """
        _translate = QtCore.QCoreApplication.translate

        # Define as colunas
        self.tabela_perido_finaceiro.setColumnCount(len(colunas))
        self.tabela_perido_finaceiro.setRowCount(0)

        # Preenche os headers
        for coluna, campo in enumerate(colunas):
            item = QtWidgets.QTableWidgetItem()
            self.tabela_perido_finaceiro.setHorizontalHeaderItem(coluna, item)
            item = self.tabela_perido_finaceiro.horizontalHeaderItem(coluna)
            item.setText(_translate("Widget", campo))

        # Preenche as linhas
        for linha, key in enumerate(dados.keys()):
            self.tabela_perido_finaceiro.insertRow(linha)
            for coluna, valor in enumerate(dados[key].values()):
                item = QtWidgets.QTableWidgetItem(str(valor))
                self.tabela_perido_finaceiro.setItem(linha, coluna, item)

        # Faz as colunas ocuparem todo o espaço da tabela
        self.tabela_perido_finaceiro.horizontalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.ResizeMode.Stretch
        )
    def gerar_ralatorios(self):
        # Pega datas do período
        inicio = self.inicio.date().toPyDate()
        fim = self.fim.date().toPyDate()

        # Abre diálogo para salvar arquivo
        caminho, _ = QFileDialog.getSaveFileName(
            None, "Salvar relatório como", "", "Excel Files (*.xlsx)"
        )
        if not caminho:  # Se o usuário cancelar
            return

        try:
            # Chama a função segura de gerar relatório
            retorno = gerar_relatorio(inicio, fim, caminho)
            # Mostra mensagem de sucesso
            QMessageBox.information(None, "Sucesso", retorno)
        except Exception as e:
            # Mensagem de erro detalhada
            QMessageBox.critical(
                None,
                "Erro",
                f"Falha ao gerar o relatório:\n{str(e)}"
            )

    def exportar_para_excel(self):

        # Pega o caminho para salvar
        caminho, _ = QFileDialog.getSaveFileName(None, "Salvar como", "", "Excel Files (*.xlsx)")
        if not caminho:
            return

        # Cria a planilha
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Relatório"

        # Cabeçalhos
        for col in range(self.tabela_perido_finaceiro.columnCount()):
            header_text = self.tabela_perido_finaceiro.horizontalHeaderItem(col).text()
            ws.cell(row=1, column=col+1, value=header_text)

        # Dados da tabela
        for row in range(self.tabela_perido_finaceiro.rowCount()):
            for col in range(self.tabela_perido_finaceiro.columnCount()):
                item = self.tabela_perido_finaceiro.item(row, col)
                ws.cell(row=row+2, column=col+1, value=item.text() if item else "")

        # Ajusta largura das colunas
        for col in range(1, self.tabela_perido_finaceiro.columnCount()+1):
            ws.column_dimensions[get_column_letter(col)].auto_size = True

        # Salva o arquivo
        try:
            wb.save(caminho)
            QMessageBox.information(None, "Sucesso", f"Planilha exportada em:\n{caminho}")
        except Exception as e:
            QMessageBox.critical(None, "Erro", f"Falha ao salvar o arquivo:\n{str(e)}")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = Ui_gestao_financeira()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec())